import {
  rem,
  px as responsive,
  inBreakpoint,
  inBreakpoints,
  getSortedEntries,
  res,
  isMax,
  oneOf,
} from "./responsive";
import * as rp from "./ResponsiveProvider";

const sml = {
  width: 700,
};
const mdm = {
  width: 960,
};
const lge = {
  width: 1000,
};
const xlg = {
  width: 1500,
};
const maxi = {
  width: 2000,
};
const sizes = {
  sm: 768,
  md: 960,
  lg: 1280,
  xl: 1920,
};

describe("inBreakpoints", () => {
  beforeEach(() => {
    jest.spyOn(rp, "useConfigurations").mockImplementation(() => ({
      sizes: sizes,
      smooth: true,
    }));
  });

  it("returns true for sm", () => {
    jest.spyOn(rp, "useWindowDimensions").mockImplementation(() => sml);
    expect(inBreakpoints(["sm"])).toEqual(true);
  });

  it("returns false for sm", () => {
    jest.spyOn(rp, "useWindowDimensions").mockImplementation(() => sml);
    expect(inBreakpoints(["md"])).toEqual(false);
  });

  it("returns true for sm w/ lg", () => {
    jest.spyOn(rp, "useWindowDimensions").mockImplementation(() => sml);
    expect(inBreakpoints(["sm", "lg"])).toEqual(true);
  });

  it("returns true for md", () => {
    jest.spyOn(rp, "useWindowDimensions").mockImplementation(() => mdm);
    expect(inBreakpoints(["md"])).toEqual(true);
  });

  it("returns false for md", () => {
    jest.spyOn(rp, "useWindowDimensions").mockImplementation(() => mdm);
    expect(inBreakpoints(["sm", "xl"])).toEqual(false);
  });

  it("returns true for lg", () => {
    jest.spyOn(rp, "useWindowDimensions").mockImplementation(() => lge);
    expect(inBreakpoints(["sm", "lg", "xl"])).toEqual(true);
  });

  it("returns false for lg", () => {
    jest.spyOn(rp, "useWindowDimensions").mockImplementation(() => lge);
    expect(inBreakpoints(["xl"])).toEqual(false);
  });

  it("returns false for above maximum", () => {
    jest.spyOn(rp, "useWindowDimensions").mockImplementation(() => maxi);
    expect(inBreakpoints(["sm", "md", "lg", "xl"])).toEqual(false);
  });

  it("returns true with different breakpoints", () => {
    jest.spyOn(rp, "useConfigurations").mockImplementation(() => ({
      sizes: { mobile: 960, desktop: 1920 },
      smooth: true,
    }));
    jest.spyOn(rp, "useWindowDimensions").mockImplementation(() => lge);
    expect(inBreakpoints(["desktop"])).toEqual(true);
  });

  it("returns false with different breakpoints", () => {
    jest.spyOn(rp, "useConfigurations").mockImplementation(() => ({
      sizes: { mobile: 960, desktop: 1920 },
      smooth: true,
    }));
    jest.spyOn(rp, "useWindowDimensions").mockImplementation(() => lge);
    expect(inBreakpoints(["desktop"])).toEqual(true);
  });
});

describe("inBreakpoint", () => {
  beforeEach(() => {
    jest.spyOn(rp, "useConfigurations").mockImplementation(() => ({
      sizes: sizes,
      smooth: true,
    }));
  });

  it("returns true for sm", () => {
    jest.spyOn(rp, "useWindowDimensions").mockImplementation(() => sml);
    expect(inBreakpoint("sm")).toEqual(true);
  });

  it("returns false for sm", () => {
    jest.spyOn(rp, "useWindowDimensions").mockImplementation(() => sml);
    expect(inBreakpoints("md")).toEqual(false);
  });

  it("returns true for xl", () => {
    jest.spyOn(rp, "useWindowDimensions").mockImplementation(() => xlg);
    expect(inBreakpoint("xl")).toEqual(true);
  });

  it("returns false for xl", () => {
    jest.spyOn(rp, "useWindowDimensions").mockImplementation(() => xlg);
    expect(inBreakpoints("md")).toEqual(false);
  });

  it("returns false for above maximum", () => {
    jest.spyOn(rp, "useWindowDimensions").mockImplementation(() => maxi);
    expect(inBreakpoints("xl")).toEqual(false);
  });

  it("returns false for above maximum", () => {
    jest.spyOn(rp, "useWindowDimensions").mockImplementation(() => maxi);
    expect(inBreakpoints("xl")).toEqual(false);
  });

  it("returns true with different breakpoints", () => {
    jest.spyOn(rp, "useConfigurations").mockImplementation(() => ({
      sizes: { any: 10, random: 900, junk: 10000 },
      smooth: true,
    }));
    jest.spyOn(rp, "useWindowDimensions").mockImplementation(() => sml);
    expect(inBreakpoints("random")).toEqual(true);
  });

  it("returns false with different breakpoints", () => {
    jest.spyOn(rp, "useConfigurations").mockImplementation(() => ({
      sizes: { any: 10, random: 900, junk: 10000 },
      smooth: true,
    }));
    jest.spyOn(rp, "useWindowDimensions").mockImplementation(() => sml);
    expect(inBreakpoints("any")).toEqual(false);
  });
});

describe("getSortedEntries", () => {
  it("returns sorted list", () => {
    const entries = getSortedEntries({
      sm: 100,
      xl: 2000,
      lg: 500,
      md: 200,
    });
    expect(entries).toEqual([
      ["sm", 100],
      ["md", 200],
      ["lg", 500],
      ["xl", 2000],
    ]);
  });

  it("handles empty list", () => {
    const entries = getSortedEntries({});
    expect(entries).toEqual([]);
  });

  it("handles presorted list", () => {
    const entries = getSortedEntries({
      eenie: 100,
      meenie: 200,
      minie: 500,
      moe: 800,
    });
    expect(entries).toEqual([
      ["eenie", 100],
      ["meenie", 200],
      ["minie", 500],
      ["moe", 800],
    ]);
  });
});

describe("rem", () => {
  beforeEach(() => {
    jest.spyOn(rp, "useConfigurations").mockImplementation(() => ({
      sizes: sizes,
      smooth: true,
    }));
  });

  it("returns sm value when screen is precicesly sm", () => {
    const width = { width: 768 };
    jest.spyOn(rp, "useWindowDimensions").mockImplementation(() => width);

    expect(rem({ sm: 16, md: 50, lg: 50, xl: 50 })).toEqual("1rem");
  });

  it("returns half sm value when screen is half sm", () => {
    const width = { width: 384 };
    jest.spyOn(rp, "useWindowDimensions").mockImplementation(() => width);

    expect(rem({ sm: 32, md: 50, lg: 50, xl: 50 })).toEqual("1rem");
  });

  it("returns sm value when screen is half sm, but smooth is false", () => {
    const width = { width: 384 };

    jest.spyOn(rp, "useConfigurations").mockImplementation(() => ({
      sizes: sizes,
      smooth: false,
    }));

    jest.spyOn(rp, "useWindowDimensions").mockImplementation(() => width);

    expect(rem({ sm: 32, md: 50, lg: 50, xl: 50 }, false)).toEqual("2rem");
  });

  it("returns md value when screen is precicesly md", () => {
    const width = { width: 960 };
    jest.spyOn(rp, "useWindowDimensions").mockImplementation(() => width);

    expect(rem({ sm: 50, md: 16, lg: 50, xl: 50 })).toEqual("1rem");
  });

  it("returns proportional md value when screen is less than md", () => {
    const width = { width: 800 };
    jest.spyOn(rp, "useWindowDimensions").mockImplementation(() => width);

    expect(rem({ sm: 50, md: 96, lg: 50, xl: 50 })).toEqual("5rem");
  });

  it("returns md value when screen is less than md, but smooth is false", () => {
    const width = { width: 800 };
    jest.spyOn(rp, "useConfigurations").mockImplementation(() => ({
      sizes: sizes,
      smooth: false,
    }));
    jest.spyOn(rp, "useWindowDimensions").mockImplementation(() => width);

    expect(rem({ sm: 50, md: 96, lg: 50, xl: 50 }, false)).toEqual("6rem");
  });

  it("returns xl value when screen is precicesly xl", () => {
    const width = { width: 1920 };
    jest.spyOn(rp, "useWindowDimensions").mockImplementation(() => width);

    expect(rem({ sm: 50, md: 50, lg: 50, xl: 16 })).toEqual("1rem");
  });

  it("returns xl value when screen is greater than xl", () => {
    const width = { width: 1921 };
    jest.spyOn(rp, "useWindowDimensions").mockImplementation(() => width);

    expect(rem({ sm: 50, md: 50, lg: 50, xl: 16 })).toEqual("1rem");
  });

  it("returns xl value when screen is much than xl", () => {
    const width = { width: 1921000 };
    jest.spyOn(rp, "useWindowDimensions").mockImplementation(() => width);

    expect(rem({ sm: 50, md: 50, lg: 50, xl: 16 })).toEqual("1rem");
  });

  it("returns xl value when screen is much than xl", () => {
    const width = { width: 1921000 };
    jest.spyOn(rp, "useWindowDimensions").mockImplementation(() => width);

    expect(rem({ sm: 50, md: 50, lg: 50, xl: 16 })).toEqual("1rem");
  });

  it("returns correct value with different breakpoints", () => {
    const width = { width: 1000 };
    jest.spyOn(rp, "useConfigurations").mockImplementation(() => ({
      sizes: { tiny: 800, normal: 1200, huge: 2000 },
      smooth: false,
    }));
    jest.spyOn(rp, "useWindowDimensions").mockImplementation(() => width);

    expect(rem({ tiny: 50, normal: 16, huge: 50 })).toEqual("1rem");
  });

  it("accepts single value", () => {
    let width = { width: 960 };
    jest.spyOn(rp, "useWindowDimensions").mockImplementation(() => width);
    expect(rem(16)).toEqual("1rem");
    width = { width: 1920 };
    jest.spyOn(rp, "useWindowDimensions").mockImplementation(() => width);
    expect(rem(32)).toEqual("2rem");
    width = { width: 768 };
    jest.spyOn(rp, "useWindowDimensions").mockImplementation(() => width);
    expect(rem(16)).toEqual("1rem");
  });
});

describe("responsive", () => {
  beforeEach(() => {
    jest.spyOn(rp, "useConfigurations").mockImplementation(() => ({
      sizes: sizes,
      smooth: true,
    }));
  });

  it("returns sm value when screen is precicesly sm", () => {
    const width = { width: 768 };
    jest.spyOn(rp, "useWindowDimensions").mockImplementation(() => width);

    expect(responsive({ sm: 16, md: 50, lg: 50, xl: 50 })).toEqual("16px");
  });

  it("returns half sm value when screen is half sm", () => {
    const width = { width: 384 };
    jest.spyOn(rp, "useWindowDimensions").mockImplementation(() => width);

    expect(responsive({ sm: 32, md: 50, lg: 50, xl: 50 })).toEqual("16px");
  });

  it("returns sm value when screen is half sm, but smooth is false", () => {
    const width = { width: 384 };
    jest.spyOn(rp, "useConfigurations").mockImplementation(() => ({
      sizes: sizes,
      smooth: false,
    }));
    jest.spyOn(rp, "useWindowDimensions").mockImplementation(() => width);

    expect(responsive({ sm: 32, md: 50, lg: 50, xl: 50 }, false)).toEqual(
      "32px"
    );
  });

  it("returns md value when screen is precicesly md", () => {
    const width = { width: 960 };
    jest.spyOn(rp, "useWindowDimensions").mockImplementation(() => width);

    expect(responsive({ sm: 50, md: 16, lg: 50, xl: 50 })).toEqual("16px");
  });

  it("returns proportional md value when screen is less than md", () => {
    const width = { width: 800 };
    jest.spyOn(rp, "useWindowDimensions").mockImplementation(() => width);

    expect(responsive({ sm: 50, md: 96, lg: 50, xl: 50 })).toEqual("80px");
  });

  it("returns md value when screen is less than md, but smooth is false", () => {
    const width = { width: 800 };
    jest.spyOn(rp, "useConfigurations").mockImplementation(() => ({
      sizes: sizes,
      smooth: false,
    }));
    jest.spyOn(rp, "useWindowDimensions").mockImplementation(() => width);

    expect(responsive({ sm: 50, md: 96, lg: 50, xl: 50 }, false)).toEqual(
      "96px"
    );
  });

  it("returns xl value when screen is precicesly xl", () => {
    const width = { width: 1920 };
    jest.spyOn(rp, "useWindowDimensions").mockImplementation(() => width);

    expect(responsive({ sm: 50, md: 50, lg: 50, xl: 16 })).toEqual("16px");
  });

  it("returns xl value when screen is greater than xl", () => {
    const width = { width: 1921 };
    jest.spyOn(rp, "useWindowDimensions").mockImplementation(() => width);

    expect(responsive({ sm: 50, md: 50, lg: 50, xl: 16 })).toEqual("16px");
  });

  it("returns xl value when screen is much than xl", () => {
    const width = { width: 1921000 };
    jest.spyOn(rp, "useWindowDimensions").mockImplementation(() => width);

    expect(responsive({ sm: 50, md: 50, lg: 50, xl: 16 })).toEqual("16px");
  });

  it("returns correct value with different breakpoints", () => {
    const width = { width: 2400 };
    jest.spyOn(rp, "useConfigurations").mockImplementation(() => ({
      sizes: { tiny: 800, normal: 1200, huge: 2000 },
      smooth: false,
    }));
    jest.spyOn(rp, "useWindowDimensions").mockImplementation(() => width);

    expect(responsive({ tiny: 50, normal: 50, huge: 16 })).toEqual("16px");
  });

  it("accepts single value", () => {
    let width = { width: 960 };
    jest.spyOn(rp, "useWindowDimensions").mockImplementation(() => width);
    expect(responsive(50)).toEqual("50px");
    width = { width: 1920 };
    jest.spyOn(rp, "useWindowDimensions").mockImplementation(() => width);
    expect(responsive(20)).toEqual("20px");
    width = { width: 768 };
    jest.spyOn(rp, "useWindowDimensions").mockImplementation(() => width);
    expect(responsive(57)).toEqual("57px");
  });
});

describe("res", () => {
  beforeEach(() => {
    jest.spyOn(rp, "useConfigurations").mockImplementation(() => ({
      sizes: sizes,
      smooth: true,
    }));
  });

  it("returns sm value when screen is precicesly sm", () => {
    const width = { width: 768 };
    jest.spyOn(rp, "useWindowDimensions").mockImplementation(() => width);

    expect(res({ sm: 16, md: 50, lg: 50, xl: 50 })).toEqual(16);
  });

  it("returns half sm value when screen is half sm", () => {
    const width = { width: 384 };
    jest.spyOn(rp, "useWindowDimensions").mockImplementation(() => width);

    expect(res({ sm: 32, md: 50, lg: 50, xl: 50 })).toEqual(16);
  });

  it("returns sm value when screen is half sm, but smooth is false", () => {
    const width = { width: 384 };
    jest.spyOn(rp, "useConfigurations").mockImplementation(() => ({
      sizes: sizes,
      smooth: false,
    }));
    jest.spyOn(rp, "useWindowDimensions").mockImplementation(() => width);

    expect(res({ sm: 32, md: 50, lg: 50, xl: 50 }, false)).toEqual(32);
  });

  it("returns md value when screen is precicesly md", () => {
    const width = { width: 960 };
    jest.spyOn(rp, "useWindowDimensions").mockImplementation(() => width);

    expect(res({ sm: 50, md: 16, lg: 50, xl: 50 })).toEqual(16);
  });

  it("returns proportional md value when screen is less than md", () => {
    const width = { width: 800 };
    jest.spyOn(rp, "useWindowDimensions").mockImplementation(() => width);

    expect(res({ sm: 50, md: 96, lg: 50, xl: 50 })).toEqual(80);
  });

  it("returns md value when screen is less than md, but smooth is false", () => {
    const width = { width: 800 };
    jest.spyOn(rp, "useConfigurations").mockImplementation(() => ({
      sizes: sizes,
      smooth: false,
    }));
    jest.spyOn(rp, "useWindowDimensions").mockImplementation(() => width);

    expect(res({ sm: 50, md: 96, lg: 50, xl: 50 }, false)).toEqual(96);
  });

  it("returns xl value when screen is precicesly xl", () => {
    const width = { width: 1920 };
    jest.spyOn(rp, "useWindowDimensions").mockImplementation(() => width);

    expect(res({ sm: 50, md: 50, lg: 50, xl: 16 })).toEqual(16);
  });

  it("returns xl value when screen is greater than xl", () => {
    const width = { width: 1921 };
    jest.spyOn(rp, "useWindowDimensions").mockImplementation(() => width);

    expect(res({ sm: 50, md: 50, lg: 50, xl: 16 })).toEqual(16);
  });

  it("returns xl value when screen is much than xl", () => {
    const width = { width: 1921000 };
    jest.spyOn(rp, "useWindowDimensions").mockImplementation(() => width);

    expect(res({ sm: 50, md: 50, lg: 50, xl: 16 })).toEqual(16);
  });

  it("returns correct value with different breakpoints", () => {
    const width = { width: 700 };
    jest.spyOn(rp, "useConfigurations").mockImplementation(() => ({
      sizes: { tiny: 800, normal: 1200, huge: 2000 },
      smooth: false,
    }));
    jest.spyOn(rp, "useWindowDimensions").mockImplementation(() => width);

    expect(res({ tiny: 16, normal: 50, huge: 50 })).toEqual(16);
  });

  it("accepts single value", () => {
    let width = { width: 960 };
    jest.spyOn(rp, "useWindowDimensions").mockImplementation(() => width);
    expect(res(50)).toEqual(50);
    width = { width: 1920 };
    jest.spyOn(rp, "useWindowDimensions").mockImplementation(() => width);
    expect(res(20)).toEqual(20);
    width = { width: 768 };
    jest.spyOn(rp, "useWindowDimensions").mockImplementation(() => width);
    expect(res(57)).toEqual(57);
  });
});

describe("isMax", () => {
  it("returns true at max", () => {
    const width = { width: 1920 };
    jest.spyOn(rp, "useWindowDimensions").mockImplementation(() => width);

    expect(isMax()).toEqual(true);
  });

  it("returns true above max", () => {
    const width = { width: 1921 };
    jest.spyOn(rp, "useWindowDimensions").mockImplementation(() => width);

    expect(isMax()).toEqual(true);
  });

  it("returns false below max", () => {
    const width = { width: 1919 };
    jest.spyOn(rp, "useWindowDimensions").mockImplementation(() => width);

    expect(isMax()).toEqual(false);
  });

  it("works with different breakpoints", () => {
    jest.spyOn(rp, "useConfigurations").mockImplementation(() => ({
      sizes: { huge: 2000, tiny: 800, normal: 1200 },
      smooth: false,
    }));
    let width = { width: 1920 };
    jest.spyOn(rp, "useWindowDimensions").mockImplementation(() => width);
    expect(isMax()).toEqual(false);
    jest.spyOn(rp, "useWindowDimensions").mockImplementation(() => width);
    width = { width: 2000 };
    expect(isMax()).toEqual(true);
  });
});

describe("oneOf", () => {
  beforeEach(() => {
    jest.spyOn(rp, "useConfigurations").mockImplementation(() => ({
      sizes: sizes,
      smooth: true,
    }));
  });

  it("returns sm value when screen is precicesly sm", () => {
    const width = { width: 768 };
    jest.spyOn(rp, "useWindowDimensions").mockImplementation(() => width);

    expect(oneOf({ sm: 16, md: 50, lg: 50, xl: 50 })).toEqual(16);
  });

  it("returns sm value when screen is half sm", () => {
    const width = { width: 384 };
    jest.spyOn(rp, "useWindowDimensions").mockImplementation(() => width);

    expect(oneOf({ sm: 32, md: 50, lg: 50, xl: 50 }, false)).toEqual(32);
  });

  it("returns md value when screen is precicesly md", () => {
    const width = { width: 960 };
    jest.spyOn(rp, "useWindowDimensions").mockImplementation(() => width);

    expect(oneOf({ sm: 50, md: 16, lg: 50, xl: 50 })).toEqual(16);
  });

  it("returns md value when screen is less than md", () => {
    const width = { width: 800 };
    jest.spyOn(rp, "useWindowDimensions").mockImplementation(() => width);

    expect(oneOf({ sm: 50, md: 96, lg: 50, xl: 50 })).toEqual(96);
  });

  it("returns xl value when screen is precicesly xl", () => {
    const width = { width: 1920 };
    jest.spyOn(rp, "useWindowDimensions").mockImplementation(() => width);

    expect(oneOf({ sm: 50, md: 50, lg: 50, xl: 16 })).toEqual(16);
  });

  it("returns xl value when screen is greater than xl", () => {
    const width = { width: 1921 };
    jest.spyOn(rp, "useWindowDimensions").mockImplementation(() => width);

    expect(oneOf({ sm: 50, md: 50, lg: 50, xl: 16 })).toEqual(16);
  });

  it("returns correct value with different breakpoints", () => {
    const width = { width: 1000 };
    jest.spyOn(rp, "useConfigurations").mockImplementation(() => ({
      sizes: { tiny: 800, normal: 1200, huge: 2000 },
    }));
    jest.spyOn(rp, "useWindowDimensions").mockImplementation(() => width);

    expect(oneOf({ tiny: 50, normal: 16, huge: 50 })).toEqual(16);
  });

  it("works with strings", () => {
    const width = { width: 800 };
    jest.spyOn(rp, "useWindowDimensions").mockImplementation(() => width);

    expect(
      oneOf({ sm: "small", md: "medium", lg: "large", xl: "xtra large" })
    ).toEqual("medium");
  });
});
