import React, { useState, useEffect, createContext, useContext } from "react";
import PropTypes from "prop-types";

const defaultValue = {};

const ResponsiveContext = createContext(defaultValue);

const ResponsiveProvider = ({ children, sizes, smooth }) => {
  const [dimensions, setDimensions] = useState({ width: 0, height: 0 });
  useEffect(() => {
    const handleResize = () => {
      let width = 0;
      let height = 0;
      if (window) {
        width = window.innerWidth;
        height = window.innerHeight;
      }
      setDimensions({ width, height });
    };
    handleResize();
    window.addEventListener("resize", handleResize);
    return () => window.removeEventListener("resize", handleResize);
  }, []);
  return (
    <ResponsiveContext.Provider value={{ dimensions, sizes, smooth }}>
      {children}
    </ResponsiveContext.Provider>
  );
};

ResponsiveProvider.propTypes = {
  children: PropTypes.oneOfType([
    PropTypes.arrayOf(PropTypes.element),
    PropTypes.element,
  ]).isRequired,
  sizes: PropTypes.any.isRequired,
  smooth: PropTypes.bool,
};

ResponsiveProvider.defaultProps = {
  smooth: true,
};

function useWindowDimensions() {
  const context = useContext(ResponsiveContext);
  if (context === defaultValue) {
    throw new Error(
      "useWindowDimensions must be used within ResponsiveProvider"
    );
  }
  return context.dimensions;
}

function useConfigurations() {
  const context = useContext(ResponsiveContext);
  if (context === defaultValue) {
    throw new Error("useConfigurations must be used within ResponsiveProvider");
  }
  return { sizes: context.sizes, smooth: context.smooth };
}

export { ResponsiveProvider, useWindowDimensions, useConfigurations };
